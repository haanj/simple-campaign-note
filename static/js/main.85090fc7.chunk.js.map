{"version":3,"sources":["cardSeeds.js","CategoryList.js","CardList.js","CancelConfirmButton.js","Card.js","App.js","serviceWorker.js","index.js"],"names":["cards","id","name","description","color","text","CategoryList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","categories","activeCategoryId","nextProps","setState","_this2","map","category","isActive","editIcon","react_default","a","createElement","className","index_es","icon","categoryName","alt","onClick","handleChangeCategory","key","handleAddCategory","Component","CardList","activeCardId","setStateDelayed","show","clearTimeout","timeOut","newState","delay","arguments","length","undefined","setTimeout","_this3","card","cardName","handleChangeCard","handleAddCard","CancelConfirmButton","_Component","inherits","createClass","value","handleClickCancel","handleClickConfirm","Card","isNameFocused","nameKey","Math","random","nameInput","React","createRef","handleChangeNameFocus","_onChangeNameFocus","bind","assertThisInitialized","_onClickCancel","_onClickConfirm","current","focus","innerText","handleUpdateCard","cardNameClass","ref","contentEditable","autoFocus","stateisNameFocused","CancelConfirmButton_CancelConfirmButton","htmlFor","library","add","fas","far","fab","App","_onChangeCategory","_onChangeCard","_onAddCategory","_onAddCard","_onUpdateCard","list","reduce","curr","next","max","activeCard","find","categoryInfo","slice","defaults","getNewModelId","newCategory","assign","push","categoryId","cardInfo","concat","newCard","cardId","newValues","categoryIndex","findIndex","categoryToUpdate","cardIndex","cardToUpdate","getActiveCards","src_CategoryList","src_CardList","src_Card","getActiveCard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.85090fc7.chunk.js","sourcesContent":["export const cards = [\n  {\n    id: 1,\n    name: 'Character',\n    description: 'A list of major and minor characters',\n    color: 'red',\n    cards: [\n      {\n        id: 1,\n        name: 'Allan Goode',\n        description: `Generally a good guy who's done amazing heroics`,\n        text: `Born in a small village, blah blah blah blah`,\n      },\n      {\n        id: 2,\n        name: 'Jerry Smith',\n        description: 'Yawn',\n        text: 'Lorem ipsum blah blah blah'\n      },\n      {\n        id: 3,\n        name: 'Mike Truck',\n        description: 'Built like a truck',\n        text: 'Part man, part car'\n      }\n    ]\n  },\n  {\n    id: 2,\n    name: 'Location',\n    description: 'Noteworthy locations',\n    color: 'green',\n    cards: [\n      {\n        id: 3,\n        name: 'Riverbend',\n        description: 'Small river fishing village',\n        text: `The birthplace of Allan Goode, this is blah blah blah`\n      },\n      {\n        id: 4,\n        name: 'Rocksville',\n        description: 'Mining camp',\n        text: 'hi ho hi ho'\n      }\n    ]\n  }\n]","import React, { Component } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nclass CategoryList extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      categories: props.categories,\n      activeCategoryId: props.activeCategoryId\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.activeCategoryId !== this.props.activeCategoryId) {\n      this.setState({ activeCategoryId: nextProps.activeCategoryId })\n    }\n\n    // TODO: add better comparison\n    if (nextProps.categories !== this.props.categories) {\n      this.setState({ categories: nextProps.categories })\n    }\n  }\n\n  render() {\n    const categories = this.state.categories.map(category => {\n      const isActive = category.id === this.state.activeCategoryId\n      const editIcon = (\n        <span className='edit-button'>\n          <FontAwesomeIcon icon={['far', 'edit']} />\n        </span>\n      )\n\n      let className = 'name'\n      if (isActive) className += ' active'\n\n      const categoryName = (\n        <span\n          className={className}\n          alt={isActive ? 'Active Category' : ''}\n          onClick={() => this.props.handleChangeCategory(category.id)}\n        >\n          {category.name}\n        </span>\n      )\n\n      return (\n        <li\n          key={category.id}\n        >\n          {categoryName}\n          {editIcon}\n        </li>\n      )\n    })\n\n    return (\n      <nav className=\"category-list list-container\">\n        <ul>\n          { categories }\n          <li \n            className='add-button'\n            key='addCategory'\n            onClick={() => this.props.handleAddCategory()}\n          >\n            <FontAwesomeIcon icon={['far', 'plus-square']} />\n          </li>\n        </ul>\n      </nav>\n    )\n  }\n}\n\nexport default CategoryList","import React, { Component } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nclass CardList extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      cards: props.cards,\n      activeCardId: props.activeCardId,\n      activeCategoryId: props.activeCategoryId\n    }\n  }\n\n  componentDidMount() {\n    this.setStateDelayed({ show: true })\n  }\n\n  componentWillUnmount() {\n    this.clearTimeout()\n  }\n\n  clearTimeout() {\n    if (this.timeOut) {\n      clearTimeout(this.timeOut)\n    }\n  }\n\n  setStateDelayed(newState, delay = 300) {\n    this.timeOut = setTimeout(() => {\n      this.setState(newState)\n    }, delay)\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.activeCategoryId !== this.props.activeCategoryId) {\n      this.setState({ activeCategoryId: nextProps.activeCategoryId})\n    }\n\n    if (nextProps.cards !== this.props.cards) {\n      this.clearTimeout()\n      this.setState({ show: false })\n      this.setStateDelayed({\n        cards: nextProps.cards,\n        show: true,\n        activeCardId: nextProps.activeCardId\n      })\n    } else if (nextProps.activeCardId !== this.props.activeCardId) {\n      this.setState({ activeCardId: nextProps.activeCardId })\n    }\n  }\n\n  // TODO: refactor some of this into functional components\n  render() {\n    const cards = this.state.cards.map(card => {\n      const isActive = card.id === this.state.activeCardId\n\n      const editIcon = (\n        <span className='edit-button'>\n          <FontAwesomeIcon icon={['far', 'edit']} />\n        </span>\n      )\n\n      let className = 'name'\n      if (isActive) className += ' active'\n\n      const cardName = (\n        <span\n          className={className}\n          alt={isActive ? 'Active Card' : ''}\n          onClick={() => this.props.handleChangeCard(card.id)}\n        >\n          {card.name}\n        </span>\n      )\n\n      return (\n        <li\n          key={card.id}\n        >\n          {cardName}\n          {editIcon}\n        </li>\n      )\n    })\n\n    let className = `card-list list-container`\n    if (this.state.show) className += ` show`\n\n    return (\n      <nav className={className}>\n        <ul>\n          { cards }\n          <li \n            className='add-button'\n            key='addCard'\n            onClick={() => this.props.handleAddCard(this.state.activeCategoryId)}\n          >\n            <FontAwesomeIcon icon={['far', 'plus-square']} />\n          </li>\n        </ul>\n      </nav>\n    )\n  }\n}\n\nexport default CardList","import React, { Component } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nexport class CancelConfirmButton extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      show: props.show || false,\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.show !== this.props.show) {\n      this.setState({ show: nextProps.show })\n    }\n  }\n\n  render() {\n    let className = 'cancel-confirm'\n    if (this.state.show) className += ' show'\n\n    return (\n      <span className={className}>\n        <span\n          className='cancel-button button'\n          onClick={() => this.props.handleClickCancel()}\n        >\n          <FontAwesomeIcon icon={['far', 'times-circle']} />\n        </span>\n\n        <span\n          className='confirm-button button'\n          onClick={() => this.props.handleClickConfirm()}\n        >\n          <FontAwesomeIcon icon={['far', 'check-circle']} />\n        </span>\n      </span>\n    )\n  }\n}","import React, { Component } from 'react'\nimport { CancelConfirmButton } from './CancelConfirmButton'\n\nclass Card extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      card: props.card,\n      isNameFocused: false,\n      nameKey: Math.random() // can force rerender after user updates content\n    }\n    this.nameInput = React.createRef();\n    this.handleChangeNameFocus = this._onChangeNameFocus.bind(this)\n    this.handleClickCancel = this._onClickCancel.bind(this)\n    this.handleClickConfirm = this._onClickConfirm.bind(this)\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.card !== this.props.card) {\n      this.setState({ card: nextProps.card })\n    }\n  }\n\n  _onChangeNameFocus(isNameFocused) {\n    this.setState({ isNameFocused })\n\n    if (isNameFocused) {\n      // workaround to auto-focus to newly-contentEditable element\n      setTimeout(() => {\n        this.nameInput.current.focus()\n      },0)\n    }\n  }\n\n  _onClickCancel() {\n    this.setState({ nameKey: Math.random() })\n    this.handleChangeNameFocus(false)\n  }\n\n  _onClickConfirm() {\n    this.handleChangeNameFocus(false)\n    const name = this.nameInput.current.innerText || 'Untitled'\n    this.props.handleUpdateCard(this.state.card.id, { name })\n  }\n\n  render() {\n    const card = this.state.card\n    if (!card) {\n      return null\n    }\n\n    let cardNameClass = 'card-name'\n    if (this.state.isNameFocused) cardNameClass += ' focus'\n\n    return (\n      <article className=\"card-container\">\n        <header>\n          <h1\n            ref={this.nameInput}\n            key={this.state.nameKey}\n            className={cardNameClass}\n            onClick={() => this.handleChangeNameFocus(true)}\n            contentEditable={this.state.isNameFocused}\n            autoFocus={this.stateisNameFocused}\n          >\n            {card.name}\n          </h1>\n          <CancelConfirmButton\n            show={this.state.isNameFocused}\n            handleClickCancel={() => this.handleClickCancel()}\n            handleClickConfirm={() => this.handleClickConfirm()}\n          />\n        </header>\n\n        <section>\n          <label htmlFor=\"card-description\">Summary</label>\n          <div className=\"card-description\">{card.description}</div>\n        </section>\n\n        <main>\n          <label htmlFor=\"card-text\">Notes</label>\n          <div className=\"card-text\">{card.text}</div>\n        </main>\n      </article>\n    )\n  }\n}\n\nexport default Card","import React, { Component } from 'react'\nimport './App.scss'\n\nimport { cards } from './cardSeeds'\n\nimport CategoryList from './CategoryList'\nimport CardList from './CardList'\nimport Card from './Card'\n\n// TODO: reduce glut once I know which icons I need\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fas } from '@fortawesome/free-solid-svg-icons'\nimport { far } from '@fortawesome/free-regular-svg-icons'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nlibrary.add(fas, far, fab)\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { \n      categories: cards,\n      activeCategoryId: cards[0].id,\n      activeCardId: cards[0].cards[0].id,\n    }\n    this.handleChangeCategory = this._onChangeCategory.bind(this)\n    this.handleChangeCard = this._onChangeCard.bind(this)\n    this.handleAddCategory = this._onAddCategory.bind(this)\n    this.handleAddCard = this._onAddCard.bind(this);\n    this.handleUpdateCard = this._onUpdateCard.bind(this);\n  }\n\n  // TODO: Hacky and Won't be needed with backend\n  // TODO: doesn't actually work with cards correctly - Need better resource management\n  getNewModelId(list) {\n    let currentMaxId = list.reduce((curr, next) => Math.max(curr, next.id), 0)\n    return currentMaxId + 1\n  }\n\n  _onChangeCategory(id) {\n    const activeCategory = this.state.categories.find(category => {\n      return category.id === id\n    })\n\n    const activeCard = activeCategory.cards[0] || {};\n\n    this.setState({\n      activeCategoryId: id,\n      activeCardId: activeCard.id\n    })\n  }\n\n  _onAddCategory(categoryInfo) {\n    const categories = this.state.categories.slice()\n    const defaults = {\n      id: this.getNewModelId(this.state.categories),\n      name: 'New Category',\n      description: 'This is a new category',\n      color: 'blue', // TODO: randomize\n      cards: []\n    }\n\n    const newCategory = Object.assign({}, defaults, categoryInfo)\n    categories.push(newCategory)\n    this.setState({categories})\n  }\n\n  _onAddCard(categoryId, cardInfo) {\n    const categories = this.state.categories.slice()\n    const category = categories.find(category => category.id === categoryId)\n    const cards = category.cards\n    const defaults = {\n      id: this.getNewModelId(cards),\n      name: `New ${category.name}`,\n      description: 'lorem ipsum',\n      text: 'Lorem ipsum blah blah blah'\n    };\n\n    const newCard = Object.assign({}, defaults, cardInfo)\n    cards.push(newCard)\n    this.setState({\n      categories,\n      activeCardId: newCard.id\n    })\n  }\n\n  // NOTE: this is pretty convoluted, and it's definitely time to priotize\n  // adding data access layer instead of loading all this json into\n  // component state. I'm just continuing with this for one more feature to see\n  // what the UX would be like for updating the title of a card\n  _onUpdateCard(cardId, newValues) {\n    const activeCategoryId = this.state.activeCategoryId\n\n    // a bit of juggling to avoid mutating original state objects\n    const categories = this.state.categories.slice()\n\n    // find index to replace element later\n    const categoryIndex = categories.findIndex(category => category.id === activeCategoryId)\n    const categoryToUpdate = categories[categoryIndex]\n\n    const cardIndex = categoryToUpdate.cards.findIndex(card => card.id === cardId)\n    const cardToUpdate = categoryToUpdate.cards[cardIndex]\n\n    const newCard = Object.assign(cardToUpdate, newValues)\n    categoryToUpdate.cards[cardIndex] = newCard\n\n    this.setState({\n      categories,\n    })\n  }\n\n  getActiveCard() {\n    const activeCardId = this.state.activeCardId\n    return this.getActiveCards().find(card => card.id === activeCardId)\n  }\n\n  getActiveCards() {\n    const categories = this.state.categories.slice()\n    const activeCategoryId = this.state.activeCategoryId\n    const activeCategory = categories\n                            .find(category => category.id === activeCategoryId)\n    \n    return activeCategory.cards\n  }\n\n  _onChangeCard(id) {\n    this.setState({ activeCardId: id })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <CategoryList\n          categories={this.state.categories}\n          activeCategoryId={this.state.activeCategoryId}\n          handleChangeCategory={this.handleChangeCategory}\n          handleAddCategory={this.handleAddCategory}\n        />\n        <CardList\n          cards={this.getActiveCards()} // TODO: I don't think this works right\n          activeCategoryId={this.state.activeCategoryId}\n          activeCardId={this.state.activeCardId}\n          handleChangeCard={this.handleChangeCard}\n          handleAddCard={this.handleAddCard}\n        />\n        <Card\n          card={this.getActiveCard()} // TODO: make more better\n          handleUpdateCard={this.handleUpdateCard}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          )\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available please refresh.\" message in your web app.\n              console.log('New content is available please refresh.')\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}